// Generated by CoffeeScript 1.6.3
(function() {
  var ProfitBricksJobBuilder, async, debug, expectOne, fs, getContextInnerKey, overRideObject, setContextInnerKey, _, _firstItem;

  fs = require('fs');

  async = require('async');

  _ = require('underscore');

  debug = require('debug')('rplan.tools.jenkins.bootstrap.profitbricks_jobbuilder');

  module.exports = function(pbApi) {
    return new ProfitBricksJobBuilder(pbApi);
  };

  ProfitBricksJobBuilder = (function() {
    var CREATE_CONNECTION_DEFAULTS, CREATE_SERVER_DEFAULTS, CREATE_STORAGE_DEFAULTS, DATACENTERS_CTX_KEY, DATACENTER_CTX_KEY, FIREWALL_CTX_KEY, IMAGES_CTX_KEY, IMAGE_CTX_KEY, NICS_CTX_KEY, NIC_CTX_KEY, SERVERS_CTX_KEY, SERVER_CTX_KEY, STORAGES_CTX_KEY, STORAGE_CTX_KEY;

    CREATE_SERVER_DEFAULTS = {
      'cores': 1,
      'ram': 512,
      'internetAccess': true
    };

    CREATE_STORAGE_DEFAULTS = {
      size: 50
    };

    CREATE_CONNECTION_DEFAULTS = {
      busType: "VIRTIO"
    };

    DATACENTERS_CTX_KEY = 'datacenters';

    DATACENTER_CTX_KEY = 'datacenter';

    IMAGES_CTX_KEY = 'images';

    IMAGE_CTX_KEY = 'image';

    SERVERS_CTX_KEY = 'servers';

    SERVER_CTX_KEY = 'server';

    STORAGES_CTX_KEY = 'storages';

    STORAGE_CTX_KEY = 'storage';

    NICS_CTX_KEY = 'server.nics';

    NIC_CTX_KEY = 'nic';

    FIREWALL_CTX_KEY = 'firewall';

    function ProfitBricksJobBuilder(pbApi, jobs) {
      this.pbApi = pbApi;
      this.jobs = jobs != null ? jobs : [];
    }

    ProfitBricksJobBuilder.prototype.logDescribeSoapClient = function() {
      var _this = this;
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.describe(function(err, result) {
          debug("" + _this.pbApi.url + " wsdl is: " + (JSON.stringify(result, null, "\t")));
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.getAllDataCenters = function(dataCentersCtxKey) {
      var _this = this;
      if (dataCentersCtxKey == null) {
        dataCentersCtxKey = DATACENTERS_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.getAllDataCenters(function(err, datacenters) {
          setContextInnerKey(ctx, dataCentersCtxKey, datacenters);
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.getDataCenterDetails = function(id, dataCenterCtxKey) {
      var _this = this;
      if (id == null) {
        id = null;
      }
      if (dataCenterCtxKey == null) {
        dataCenterCtxKey = DATACENTER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var dcID;
        if (id != null) {
          dcID = id;
        } else {
          dcID = _firstItem(getContextInnerKey(ctx, dataCenterCtxKey).dataCenterId);
        }
        return _this.pbApi.getDataCenter({
          dataCenterId: dcID
        }, function(err, detailedDatacenter) {
          setContextInnerKey(ctx, dataCenterCtxKey, detailedDatacenter);
          debug("datacenter found " + (JSON.stringify(detailedDatacenter)));
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.deleteDataCenter = function(id, dataCenterCtxKey) {
      var _this = this;
      if (id == null) {
        id = null;
      }
      if (dataCenterCtxKey == null) {
        dataCenterCtxKey = DATACENTER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var dcID;
        if (id != null) {
          dcID = id;
        } else {
          dcID = _firstItem(getContextInnerKey(ctx, dataCenterCtxKey).dataCenterId);
        }
        return _this.pbApi.deleteDataCenter({
          dataCenterId: dcID
        }, function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.deleteDataCenters = function(dataCentersCtxKey) {
      var _this = this;
      if (dataCentersCtxKey == null) {
        dataCentersCtxKey = DATACENTERS_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.deleteDataCenters(getContextInnerKey(ctx, dataCentersCtxKey), function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.createDataCenter = function(dataCenterConfig, dataCenterCtxKey) {
      var _this = this;
      if (dataCenterCtxKey == null) {
        dataCenterCtxKey = DATACENTER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.createDataCenter(dataCenterConfig, function(err, newDataCenter) {
          debug("datacenter created with err: " + err + ", response: " + (JSON.stringify(newDataCenter)));
          setContextInnerKey(ctx, dataCenterCtxKey, overRideObject(dataCenterConfig, newDataCenter));
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.createServer = function(serverConfig, dataCenterCtxKey, serverCtxKey) {
      var _this = this;
      if (dataCenterCtxKey == null) {
        dataCenterCtxKey = DATACENTER_CTX_KEY;
      }
      if (serverCtxKey == null) {
        serverCtxKey = SERVER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var config;
        config = overRideObject({}, CREATE_SERVER_DEFAULTS);
        config = overRideObject(config, serverConfig);
        config.dataCenterId = _firstItem(getContextInnerKey(ctx, dataCenterCtxKey).dataCenterId);
        return _this.pbApi.createServer(config, function(err, newServer) {
          debug("server created with err: " + err + ", response: " + (JSON.stringify(newServer)));
          setContextInnerKey(ctx, serverCtxKey, overRideObject(config, newServer));
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.getServerDetails = function(id, serverCtxKey) {
      var _this = this;
      if (id == null) {
        id = null;
      }
      if (serverCtxKey == null) {
        serverCtxKey = SERVER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var sID;
        if (id != null) {
          sID = id;
        } else {
          sID = _firstItem(getContextInnerKey(ctx, serverCtxKey).serverId);
        }
        return _this.pbApi.getServer({
          serverId: sID
        }, function(err, detailedServer) {
          setContextInnerKey(ctx, serverCtxKey, detailedServer);
          debug("server found " + (JSON.stringify(detailedServer)));
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.getAllImages = function(imagesCtxKey) {
      var _this = this;
      if (imagesCtxKey == null) {
        imagesCtxKey = IMAGES_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.getAllImages(function(err, images) {
          setContextInnerKey(ctx, imagesCtxKey, images);
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.createStorage = function(storageConfig, dataCenterCtxKey, imageCtxKey, storageCtxKey) {
      var _this = this;
      if (dataCenterCtxKey == null) {
        dataCenterCtxKey = DATACENTER_CTX_KEY;
      }
      if (imageCtxKey == null) {
        imageCtxKey = IMAGE_CTX_KEY;
      }
      if (storageCtxKey == null) {
        storageCtxKey = STORAGE_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var config;
        config = overRideObject({}, CREATE_STORAGE_DEFAULTS);
        config = overRideObject(config, storageConfig);
        config.dataCenterId = _firstItem(getContextInnerKey(ctx, dataCenterCtxKey).dataCenterId);
        config.mountImageId = _firstItem(getContextInnerKey(ctx, imageCtxKey).imageId);
        return _this.pbApi.createStorage(config, function(err, newStorage) {
          debug("storrage created with err: " + err + ", response: " + (JSON.stringify(newStorage)));
          setContextInnerKey(ctx, storageCtxKey, overRideObject(config, newStorage));
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.connectStorageToServer = function(connectionConfig, serverCtxKey, storageCtxKey) {
      var _this = this;
      if (serverCtxKey == null) {
        serverCtxKey = SERVER_CTX_KEY;
      }
      if (storageCtxKey == null) {
        storageCtxKey = STORAGE_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var config;
        config = overRideObject({}, CREATE_CONNECTION_DEFAULTS);
        config = overRideObject(config, connectionConfig);
        config.storageId = _firstItem(getContextInnerKey(ctx, storageCtxKey).storageId);
        config.serverId = _firstItem(getContextInnerKey(ctx, serverCtxKey).serverId);
        return _this.pbApi.connectStorageToServer(config, function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.deleteStorages = function(storagesCtxKey) {
      var _this = this;
      if (storagesCtxKey == null) {
        storagesCtxKey = STORAGES_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.deleteStorages(getContextInnerKey(ctx, storagesCtxKey), function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.addFirewallRulesToNic = function(rules, nicCtxKey) {
      var rule, _fn, _i, _len,
        _this = this;
      if (nicCtxKey == null) {
        nicCtxKey = NIC_CTX_KEY;
      }
      _fn = function(rule) {
        return _this.jobs.push(function(ctx, cb) {
          return _this.pbApi.addFirewallRuleToNic(rule, getContextInnerKey(ctx, nicCtxKey), function(err, firewall) {
            setContextInnerKey(ctx, FIREWALL_CTX_KEY, firewall);
            return cb(err, ctx);
          });
        });
      };
      for (_i = 0, _len = rules.length; _i < _len; _i++) {
        rule = rules[_i];
        _fn(rule);
      }
      return this;
    };

    ProfitBricksJobBuilder.prototype.activateFirewalls = function() {
      var _this = this;
      this.jobs.push(function(ctx, cb) {
        var firewallId;
        firewallId = _firstItem(getContextInnerKey(ctx, FIREWALL_CTX_KEY).firewallId);
        return _this.pbApi.activateFirewalls(firewallId, function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.filter = function(patternObj, ctxKey, ctxListKey) {
      var _this = this;
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.filterItems(getContextInnerKey(ctx, ctxListKey), patternObj, function(err, filteredItems) {
          setContextInnerKey(ctx, ctxKey, filteredItems);
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.filterStorages = function(patternObj) {
      return this.filter(patternObj, STORAGES_CTX_KEY, "" + DATACENTER_CTX_KEY + ".storages");
    };

    ProfitBricksJobBuilder.prototype.filterServers = function(patternObj) {
      return this.filter(patternObj, SERVERS_CTX_KEY, "" + DATACENTER_CTX_KEY + ".servers");
    };

    ProfitBricksJobBuilder.prototype.filterDataCenters = function(patternObj) {
      return this.filter(patternObj, DATACENTERS_CTX_KEY, "" + DATACENTERS_CTX_KEY);
    };

    ProfitBricksJobBuilder.prototype.selectOne = function(patternObj, ctxKey, ctxListKey) {
      var _this = this;
      this.jobs.push(function(ctx, cb) {
        return _this.pbApi.filterItems(getContextInnerKey(ctx, ctxListKey), patternObj, function(err, filteredItems) {
          var item;
          item = expectOne(filteredItems);
          if (item == null) {
            return cb("ERROR: expect one " + ctxKey + " with pattern  " + (JSON.stringify(patternObj)) + " but found " + filteredItems.length);
          } else {
            debug("found one " + ctxKey + " with values " + (JSON.stringify(item)));
            setContextInnerKey(ctx, ctxKey, item);
            return cb(err, ctx);
          }
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.selectOneDataCenter = function(patternObj) {
      return this.selectOne(patternObj, DATACENTER_CTX_KEY, DATACENTERS_CTX_KEY);
    };

    ProfitBricksJobBuilder.prototype.selectOneServer = function(patternObj) {
      return this.selectOne(patternObj, SERVER_CTX_KEY, "" + DATACENTER_CTX_KEY + ".servers");
    };

    ProfitBricksJobBuilder.prototype.selectOneImage = function(patternObj) {
      return this.selectOne(patternObj, IMAGE_CTX_KEY, IMAGES_CTX_KEY);
    };

    ProfitBricksJobBuilder.prototype.selectOneNic = function(patternObj) {
      return this.selectOne(patternObj, NIC_CTX_KEY, NICS_CTX_KEY);
    };

    ProfitBricksJobBuilder.prototype.waitUntilDataCenterIsAvailable = function(dataCenterCtxKey) {
      var _this = this;
      if (dataCenterCtxKey == null) {
        dataCenterCtxKey = DATACENTER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var dcID;
        dcID = _firstItem(getContextInnerKey(ctx, dataCenterCtxKey).dataCenterId);
        return _this.pbApi.waitUntilDataCenterIsAvailable({
          dataCenterId: dcID
        }, function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.waitUntilDataCenterIsDead = function(dcID, dataCenterCtxKey) {
      var _this = this;
      if (dcID == null) {
        dcID = null;
      }
      if (dataCenterCtxKey == null) {
        dataCenterCtxKey = DATACENTER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var _ref;
        if (dcID == null) {
          dcID = _firstItem((_ref = getContextInnerKey(ctx, dataCenterCtxKey)) != null ? _ref.dataCenterId : void 0);
        }
        return _this.pbApi.waitUntilDataCenterIsDead({
          dataCenterId: dcID
        }, function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.waitUntilServerIsRunning = function(serverCtxKey) {
      var _this = this;
      if (serverCtxKey == null) {
        serverCtxKey = SERVER_CTX_KEY;
      }
      this.jobs.push(function(ctx, cb) {
        var serverID;
        serverID = _firstItem(getContextInnerKey(ctx, serverCtxKey).serverId);
        return _this.pbApi.waitUntilServerIsRunning({
          serverId: serverID
        }, function(err) {
          return cb(err, ctx);
        });
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.log = function(ctxKey) {
      this.jobs.push(function(ctx, cb) {
        debug(JSON.stringify(getContextInnerKey(ctx, ctxKey), null, "\t"));
        return cb(null, ctx);
      });
      return this;
    };

    ProfitBricksJobBuilder.prototype.execute = function(cb) {
      var ctx, jobs;
      if (this.ctx == null) {
        this.ctx = {};
      }
      ctx = this.ctx;
      jobs = [
        function(cb) {
          return cb(null, ctx);
        }
      ].concat(this.jobs);
      this.jobs = [];
      return async.waterfall(jobs, function(err, ctx) {
        if ((err != null)) {
          debug("profitBricks jobs failed with error: " + err + " and context: " + ctx);
        } else {
          debug("profitBricks jobs succeed");
        }
        if (_.isFunction(cb)) {
          return cb(err, ctx);
        }
      });
    };

    ProfitBricksJobBuilder.prototype.getContextItem = function(key) {
      return getContextInnerKey(this.ctx, key);
    };

    ProfitBricksJobBuilder.prototype.getFirstContextItem = function(key) {
      return _firstItem(this.getContextItem(key));
    };

    ProfitBricksJobBuilder.prototype.getFirstDataCenterID = function() {
      var _ref;
      return _firstItem((_ref = _firstItem(this.getContextItem("datacenters"))) != null ? _ref.dataCenterId : void 0);
    };

    ProfitBricksJobBuilder.prototype.firstItem = function(value) {
      return _firstItem(value);
    };

    return ProfitBricksJobBuilder;

  })();

  expectOne = function(list) {
    if (list.length === 1) {
      return list[0];
    } else {
      return null;
    }
  };

  _firstItem = function(value) {
    if (_.isArray(value)) {
      return value[0];
    } else {
      return value;
    }
  };

  overRideObject = function(obj, values) {
    var key, value;
    for (key in values) {
      value = values[key];
      if (value != null) {
        obj[key] = value;
      }
    }
    return obj;
  };

  getContextInnerKey = function(ctx, innerKey) {
    var key, _i, _len, _ref;
    _ref = innerKey.split(".");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (ctx) {
        ctx = ctx[key];
      }
    }
    return ctx;
  };

  setContextInnerKey = function(ctx, innerKey, value) {
    var key, keyList, lastKey, _i, _len;
    keyList = innerKey.split(".");
    lastKey = keyList.splice(-1);
    for (_i = 0, _len = keyList.length; _i < _len; _i++) {
      key = keyList[_i];
      if (_.isObject(ctx[key])) {
        ctx = ctx[key];
      } else if (ctx[key] == null) {
        ctx[key] = {};
        ctx = ctx[key];
      } else {
        ctx = null;
      }
    }
    return ctx != null ? ctx[lastKey] = value : void 0;
  };

}).call(this);
